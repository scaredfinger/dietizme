import { NhostClient } from '@nhost/nhost-js'
import { GraphQLClient } from 'graphql-request'
import { env, exit } from 'process'
import { basename } from 'path'

import { getSdk } from './generated'
import {
  createProducts,
  createSeedData,
  uploadRandomImages,
} from './common-operations'
import { faker } from '@faker-js/faker'

const fullFileName = __filename
const baseFileName = basename(fullFileName)

const shouldRunThisFile = process.argv.filter((a) => a.includes(baseFileName))

if (!shouldRunThisFile) exit(0)

const { GRAPHQL_SERVER, ADMIN_SECRET, NHOST_DOMAIN, NHOST_REGION } = env

describe('seed data', () => {
  let graphql: GraphQLClient
  let sdk: ReturnType<typeof getSdk>
  let nhost: NhostClient

  beforeAll(() => {
    graphql = new GraphQLClient(GRAPHQL_SERVER, {
      headers: {
        'x-hasura-admin-secret': ADMIN_SECRET,
      },
    })

    nhost = new NhostClient({
      subdomain: NHOST_DOMAIN,
      region: NHOST_REGION,
      adminSecret: ADMIN_SECRET
    })

    sdk = getSdk(graphql)
  })

  it('create default data', async () => {
    await createSeedData(nhost, sdk, graphql, {
      
      settings: {
        name: faker.company.name(),
      } as any
    })
  }, 100_000)
  
  it.skip('create sample data', async () => {
    // await createSeedData(nhost, sdk, faker.lorem.sentence())
  }, 100_000)

  it.skip('create products', async () => {
    const products = await createProducts(nhost, 1)
    products.forEach(p => p.organization_id = 'lorem-ipsum')

    const result = await sdk.upsert_products({ products })
  }, 100_000)

  it.skip('can get random images', async () => {
    const images = await uploadRandomImages(nhost)

    expect(images).toBeTruthy()
  })
})
